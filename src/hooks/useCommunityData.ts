import { useAuthenticatedQuery, createQueryKey } from './useAuthenticatedQuery';\n\n// Types for community data - centralized definitions\nexport interface Community {\n  id: string;\n  name: string;\n  description?: string;\n  logo_url?: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface UserCommunity extends Community {\n  role: 'owner' | 'admin' | 'member';\n  joined_at: string;\n}\n\n/**\n * Hook for fetching a single community by ID\n * Used across multiple components that need community details\n */\nexport function useCommunity(communityId?: string) {\n  return useAuthenticatedQuery<Community>(\n    createQueryKey('community', communityId),\n    `/api/communities/${communityId}`,\n    {\n      freshness: 'static',\n      updateFrequency: 'none',\n      enabled: !!communityId,\n      errorMessage: 'Failed to fetch community',\n    }\n  );\n}\n\n/**\n * Hook for fetching all communities the current user belongs to\n * Used in sidebar, community selector, and navigation\n */\nexport function useUserCommunities() {\n  return useAuthenticatedQuery<UserCommunity[]>(\n    createQueryKey('user-communities'),\n    '/api/me/communities',\n    {\n      freshness: 'dynamic',\n      updateFrequency: 'slow',\n      backgroundRefetch: true,\n      errorMessage: 'Failed to fetch your communities',\n    }\n  );\n}\n\n// Helper function to get community name from cached data\nexport function getCommunityName(communityId: string, communities?: UserCommunity[]): string {\n  const community = communities?.find(c => c.id === communityId);\n  return community?.name || `Community ${communityId}`;\n}\n\n// Helper function to check if user has admin permissions\nexport function hasAdminPermissions(role?: 'owner' | 'admin' | 'member' | null): boolean {\n  return role === 'owner' || role === 'admin';\n}