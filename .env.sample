# üåê Server Configuration
# The port your application will run on
# Example: PORT=3000
# Default: 3000 (if not specified) - usually left empty for Railway auto-assignment
PORT=

# üîê Cryptographic Keys
# Public key for  plugin authentication (JWT verification)
# This is used by CgPluginLib.initialize() to verify signed messages
# Get this from your community settings
# Format: Multi-line PEM key with \n escape sequences (or ECDSA also accepted)
NEXT_PUBLIC_PUBKEY="-----BEGIN PUBLIC KEY-----\nYOUR_PUBLIC_KEY_CONTENT_HERE\n-----END PUBLIC KEY-----\n"

# Private key corresponding to the public key above (server-side only)
# Used for signing JWTs and cryptographic operations
# ‚ö†Ô∏è CRITICAL: Keep this secret and never expose it client-side
# Format: Multi-line PEM key with \n escape sequences (or ECDSA also accepted)
NEXT_PRIVATE_PRIVKEY="-----BEGIN PRIVATE KEY-----\nYOUR_PRIVATE_KEY_CONTENT_HERE\n-----END PRIVATE KEY-----\n"

# üóÑÔ∏è PostgreSQL Connection Details
# Standard PostgreSQL connection parameters
# For local development, set up a PostgreSQL database
# For production, use a managed service like Railway PostgreSQL, Neon, or Supabase
POSTGRES_HOST=localhost
POSTGRES_PORT=5434
POSTGRES_USER=plugin_user
POSTGRES_PASSWORD=plugin_password
POSTGRES_DB=plugin_db

# For node-pg-migrate (full connection string format)
# This combines all the above PostgreSQL settings into a single URL
# Example: postgres://user:password@host:port/database (note: postgres:// not postgresql://)
# Railway auto-generates this for you
DATABASE_URL=postgres://plugin_user:plugin_password@localhost:5434/plugin_db

# üîÑ Redis Connection (for caching and Socket.IO scaling)
# Used for Socket.IO multi-instance coordination and caching
# Format: redis://username:password@host:port/database
# For Railway: Use Railway Redis add-on (auto-generated)
# For local development: redis://localhost:6379
REDIS_URL=redis://localhost:6379

# ü™£ File Storage Configuration (MinIO, S3, or S3-compatible service)
# Access credentials for your storage service
STORAGE_ACCESS_KEY_ID=nextjs-uploader
STORAGE_SECRET_ACCESS_KEY=your-secret-key-here
STORAGE_BUCKET_NAME=assets
# Region setting (use 'us-east-1' for MinIO compatibility)
STORAGE_REGION=us-east-1
# Endpoint URL for your storage service
# For custom MinIO: https://my.curia.pics
# For Railway MinIO: https://bucket-production-xxxx.up.railway.app
# For AWS S3: leave empty (uses default AWS endpoints)
STORAGE_ENDPOINT_URL=https://
# Public URL prefix for accessing stored files
# Must end with a slash and include bucket name
STORAGE_PUBLIC_URL_PREFIX=https://

# üîë JWT Authentication Configuration
# Secret key for signing JWT tokens (server-side authentication)
# ‚ö†Ô∏è CRITICAL: Use a strong, random secret (32+ characters)
# Generate with: openssl rand -base64 32
# Example format: Base64 string with mixed alphanumeric and special characters
JWT_SECRET=your-super-secret-jwt-key-here
# JWT token expiration time in seconds
# Default: 3600 (1 hour)
# Common values: 3600 (1 hour), 86400 (24 hours), 2592000 (30 days)
JWT_EXPIRES_IN_SECONDS=3600

# üßë‚Äçüíº Access Control & Role Management
# ‚ö†Ô∏è SECURITY NOTE: These should NOT have NEXT_PUBLIC_ prefix to avoid client exposure
# However, current implementation uses NEXT_PUBLIC_ - consider changing for security
# Comma-separated list of role titles that grant admin access
# Example: Admin,Moderator,Core Team
# Case-insensitive matching against user role titles from Common Ground
NEXT_PUBLIC_ADMIN_ROLE_IDS=Admin,Moderator

# Roles to ignore when determining admin status
# Useful for excluding certain technical or bot roles
# Example: Public,Bot,Webhook,System
NEXT_PUBLIC_IGNORED_ROLE_IDS=Public

# User ID that always has super admin access (emergency access)
# Use the Common Ground user ID (UUID format) of the main administrator
# Example: 86326068-5e1f-41b4-ba39-213402bf3601
NEXT_PUBLIC_SUPERADMIN_ID=

# üîå Plugin & Host Service URLs
# Base URL where your Curia instance is publicly accessible
# Used for: semantic URLs, RSS feeds, external sharing, Telegram links
# For development: Use ngrok tunnel URL
# For production: Use Railway app URL or custom domain
# Example: https://8f0b914c8e28353f.ngrok.app (development)
# Example: https://forum.mycommunity.com (production)
NEXT_PUBLIC_PLUGIN_BASE_URL=https://

# Instance URL for Registration
# Usually https://curia.network for production
# For development: same as PLUGIN_BASE_URL
NEXT_PUBLIC_PLUGIN_INSTANCE_URL=https://

# Host service URL for API proxy communication (iframe ‚Üî parent communication)
# Used by ApiProxyServerComponent to bypass CSP restrictions
# For development: http://localhost:3001 (different port from main app)
# For production: Usually the same as your main app URL
NEXT_PUBLIC_HOST_SERVICE_URL=http://

# RSS feed base URL (for generating RSS feed URLs in UI)
# For development: http://localhost:3000
# For production: same as PLUGIN_BASE_URL
NEXT_PUBLIC_RSS_BASE_URL=http://

# üß† AI Configuration
# Maximum tokens allowed for AI knowledge context
# Used by: AI auto-moderation, community knowledge, board-specific context
# Default: 2000 tokens (~8000 characters)
# Higher values = more context but higher AI costs
NEXT_PUBLIC_MAX_KNOWLEDGE_TOKENS=2000

# ü§ñ OpenAI Integration
# API key for OpenAI services (GPT models, embeddings, text generation)
# Get from: https://platform.openai.com/api-keys
# Used for: AI chat, content improvement, embeddings, auto-moderation
# Format: sk-proj-... (newer format) or sk-... (legacy format)
OPENAI_API_KEY=sk-proj-your-openai-api-key-here

# üí≥ Stripe Integration (for paid features)
# Price ID for unlock/premium features
# Get from your Stripe dashboard after creating products
# Format: price_... (note: may include URL encoding like %20)
NEXT_PUBLIC_STRIPE_UNLOCK_PRICE_ID=

# üåà WalletConnect Configuration (for Web3 wallet connections)
# Project ID for WalletConnect v2
# Get from: https://cloud.walletconnect.com/
# Used by: RainbowKit, wallet connections, ENS verification
# Format: 32-character hexadecimal string
NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=

# ü™ê LUKSO Network Configuration (for Universal Profile support)
## Mainnet Configuration
# LUKSO mainnet RPC URL for blockchain calls
# Default: https://rpc.mainnet.lukso.network
NEXT_PUBLIC_LUKSO_MAINNET_RPC_URL="https://rpc.mainnet.lukso.network"
# LUKSO mainnet chain ID
# Default: 42
NEXT_PUBLIC_LUKSO_MAINNET_CHAIN_ID="42"

## Testnet Configuration (for development/testing)
# LUKSO testnet RPC URL
# Default: https://rpc.testnet.lukso.network
NEXT_PUBLIC_LUKSO_TESTNET_RPC_URL="https://rpc.testnet.lukso.network"
# LUKSO testnet chain ID
# Default: 4201
NEXT_PUBLIC_LUKSO_TESTNET_CHAIN_ID="4201"

# IPFS gateway for Universal Profile metadata
# Used for fetching profile images, metadata, and other assets
# Default: https://api.universalprofile.cloud/ipfs/
NEXT_PUBLIC_LUKSO_IPFS_GATEWAY=https://api.universalprofile.cloud/ipfs/

# üß™ WebSocket Configuration (Railway deployment optimization)
# Force Socket.IO to use HTTP polling instead of WebSockets
# Set to "true" on Railway and other platforms with WebSocket issues
# Set to "false" or leave empty for normal WebSocket usage
# This prevents conflicts with Universal Profile wallet extensions
NEXT_PUBLIC_FORCE_SOCKET_POLLING_ON_UP="true"

# üì¨ Telegram Bot Integration
# Bot API token from @BotFather on Telegram
# Get by: 1) Message @BotFather, 2) /newbot, 3) Follow instructions
# Format: 1234567890:ABCDEF...
TELEGRAM_BOT_API_TOKEN=

# Telegram Bot API URL (for custom endpoints or webhook setup)
# Default: https://api.telegram.org (but often includes bot token for getUpdates)
# Format for getUpdates: https://api.telegram.org/bot{TOKEN}/getUpdates
TELEGRAM_BOT_API_URL="https://api.telegram.org"

# Webhook secret for secure Telegram webhook verification
# Generate with: openssl rand -hex 32
# Used to verify webhooks are actually from Telegram
# Can reuse JWT_SECRET if needed
TELEGRAM_WEBHOOK_SECRET=your-webhook-secret-here

# Secret for generating secure Telegram connect codes
# Generate with: openssl rand -hex 32
# Used to create unique codes for linking Telegram groups to communities
TELEGRAM_CONNECT_SECRET="your-super-secret-random-string-for-code-generation"

# Bot display name (shown in UI instructions)
# Should match your bot's actual username from @BotFather (without @)
# Example: cg_curia, my_community_bot
TELEGRAM_BOT_NAME=""

# üß± Common Ground Integration
# Base URL for Common Ground platform
# Used for: cross-community navigation, redirects, external links
# Production: https://app.cg
# Development: May use shorter URLs for testing
NEXT_PUBLIC_COMMON_GROUND_BASE_URL="https://app.cg"